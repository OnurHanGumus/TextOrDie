// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Signals;
using Sirenix.OdinInspector;

public class AnswerTableManager : MonoBehaviour
{
	public class Row
	{
		public string question_id;
		public string id;
		public string answer;

	}
	#region Self Variables
	#region Public Variables
	#endregion

	#region SerializeField Variables
	[SerializeField] private TextAsset answerFile;
	#endregion

	#region Private Variables
	[ShowInInspector]
	private List<Row> _rowList = new List<Row>();
	private bool _isLoaded = false;
	#endregion
	#endregion
	private void Awake()
	{
		Load(answerFile);
	}
	#region Event Subscriptions

	private void OnEnable()
	{
		SubscribeEvents();
	}

	private void SubscribeEvents()
	{
		QuestionSignals.Instance.onPlayerHitEnterButton += OnComparison;
		QuestionSignals.Instance.onGetRandomAnswer += OnGetRandomAnswer;
	}

	private void UnsubscribeEvents()
	{
		QuestionSignals.Instance.onPlayerHitEnterButton -= OnComparison;
		QuestionSignals.Instance.onGetRandomAnswer -= OnGetRandomAnswer;

	}

	private void OnDisable()
	{
		UnsubscribeEvents();
	}

	#endregion


	public bool IsLoaded()
	{
		return _isLoaded;
	}

	public List<Row> GetRowList()
	{
		return _rowList;
	}

	public void Load(TextAsset csv)
	{
		_rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for (int i = 1; i < grid.Length; i++)
		{
			Row row = new Row();
			row.question_id = grid[i][0];
			row.id = grid[i][1];
			row.answer = grid[i][2];

			_rowList.Add(row);
		}
		_isLoaded = true;
	}

	public int NumRows()
	{
		return _rowList.Count;
	}

	public Row GetAt(int i)
	{
		if (_rowList.Count <= i)
			return null;
		return _rowList[i];
	}

	public Row Find_question_id(string find)
	{
		return _rowList.Find(x => x.question_id == find);
	}
	public List<Row> FindAll_question_id(string find)
	{
		return _rowList.FindAll(x => x.question_id == find);
	}
	public Row Find_id(string find)
	{
		return _rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return _rowList.FindAll(x => x.id == find);
	}
	public bool Find_answer(string find, List<Row> dataSet)
	{		
		foreach (var i in dataSet)
        {
            if (find.ToString().Equals(i.answer.ToString()))
            {
				return true;
            }
        }
		return false;
	}
	public List<Row> FindAll_answer(string find)
	{
		return _rowList.FindAll(x => x.answer == find);
	}
	public void OnComparison(string typedValue)
    {
		int questionId = QuestionSignals.Instance.onGetQuestionId();
		List<Row> questionsAnswerList =  FindAll_question_id(questionId.ToString());

		bool isAnsweredTrue = Find_answer((typedValue).Remove(typedValue.Length - 1), questionsAnswerList);

		if (isAnsweredTrue)
        {
			PlayerSignals.Instance.onPlayerAnsweredRight?.Invoke(typedValue.Length);
			Debug.Log("player answered right");
        }
        else
        {
			PlayerSignals.Instance.onPlayerAnsweredWrong?.Invoke();
			Debug.Log("player answered wrong");
		}
	}

	public string OnGetRandomAnswer() //for enemies
    {
		int questionId = QuestionSignals.Instance.onGetQuestionId();
		List<Row> questionsAnswerList = FindAll_question_id(questionId.ToString());
		return questionsAnswerList[Random.Range(0, questionsAnswerList.Count - 1)].answer;
    }

}