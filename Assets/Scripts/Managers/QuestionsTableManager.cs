// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Signals;

public class QuestionsTableManager : MonoBehaviour
{
	public class Row
	{
		public string id;
		public string question;

	}
	#region Self Variables
	#region Public Variables
	#endregion

	#region SerializeField Variables
	[SerializeField] private TextAsset questionFile;
	#endregion

	#region Private Variables
	private List<Row> _rowList = new List<Row>();
	private bool _isLoaded = false;
	#endregion
	#endregion
	private void Awake()
	{
		Load(questionFile);
	}
	#region Event Subscriptions

	private void OnEnable()
	{
		SubscribeEvents();
	}

	private void SubscribeEvents()
	{
		QuestionSignals.Instance.onGetQuestion += OnGetQuestion;
	}

	private void UnsubscribeEvents()
	{
		QuestionSignals.Instance.onGetQuestion -= OnGetQuestion;
	}

	private void OnDisable()
	{
		UnsubscribeEvents();
	}

	#endregion

	public bool IsLoaded()
	{
		return _isLoaded;
	}

	public List<Row> GetRowList()
	{
		return _rowList;
	}

	private void Load(TextAsset csv)
	{
		_rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for (int i = 1; i < grid.Length; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.question = grid[i][1];

			_rowList.Add(row);
		}
		_isLoaded = true;
	}

	private int NumRows()
	{
		return _rowList.Count;
	}

	private Row GetAt(int i)
	{
		if (_rowList.Count <= i)
			return null;
		return _rowList[i];
	}

	private Row Find_id(string find)
	{
		return _rowList.Find(x => x.id == find);
	}
	private List<Row> FindAll_id(string find)
	{
		return _rowList.FindAll(x => x.id == find);
	}
	private Row Find_question(string find)
	{
		return _rowList.Find(x => x.question == find);
	}
	private List<Row> FindAll_question(string find)
	{
		return _rowList.FindAll(x => x.question == find);
	}

	private string OnGetQuestion(int id)
    {
		return GetAt(id).question;
    }
	//private int OnGetQuestionId()
	//{
	//	//return GetAt(id).question;
	//}

}